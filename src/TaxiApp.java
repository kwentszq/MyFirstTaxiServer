import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class TaxiApp extends JFrame implements ActionListener {
    private JPanel mainPanel;
    private CardLayout cardLayout;

    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    private JPanel welcomePanel;
    private JButton driverBtn;
    private JButton passengerBtn;
    private JButton exitBtn;

    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è
    private JPanel driverPanel;
    private JTextField carBrandField;
    private JTextField carNumberField;
    private JTextField driverNameField;
    private JComboBox<String> carClassCombo;
    private JButton driverSubmitBtn;
    private JButton driverBackBtn;

    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏
    private JPanel passengerPanel;
    private JComboBox<String> passengerClassCombo;
    private JTextField addressField;
    private JButton passengerSubmitBtn;
    private JButton passengerBackBtn;

    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    private JPanel pricePanel;
    private JSpinner distanceSpinner;
    private JButton calculateBtn;
    private JButton priceBackBtn;
    private JLabel priceLabel;

    public TaxiApp() {
        initializeApp();
        createWelcomeScreen();
        createDriverScreen();
        createPassengerScreen();
        createPriceScreen();

        setupMainPanel();
    }

    private void initializeApp() {
        setTitle(" Taxi App - –°–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(500, 400);
        setLocationRelativeTo(null);
        setResizable(false);

        cardLayout = new CardLayout();
        mainPanel = new JPanel(cardLayout);
    }

    private void createWelcomeScreen() {
        welcomePanel = new JPanel(new BorderLayout());
        welcomePanel.setBackground(new Color(240, 240, 240));

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        JLabel titleLabel = new JLabel(" –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í TAXI APP!", JLabel.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 18));
        titleLabel.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));

        // –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
        JPanel buttonPanel = new JPanel(new GridLayout(3, 1, 10, 10));
        buttonPanel.setBorder(BorderFactory.createEmptyBorder(0, 50, 50, 50));

        driverBtn = createStyledButton("–Ø –≤–æ–¥–∏—Ç–µ–ª—å", new Color(166, 148, 25));
        passengerBtn = createStyledButton(" –Ø –ø–∞—Å—Å–∞–∂–∏—Ä", new Color(0, 236, 100));
        exitBtn = createStyledButton(" –í—ã–π—Ç–∏", new Color(220, 20, 60));

        driverBtn.addActionListener(this);
        passengerBtn.addActionListener(this);
        exitBtn.addActionListener(this);

        buttonPanel.add(driverBtn);
        buttonPanel.add(passengerBtn);
        buttonPanel.add(exitBtn);

        welcomePanel.add(titleLabel, BorderLayout.NORTH);
        welcomePanel.add(buttonPanel, BorderLayout.CENTER);

        mainPanel.add(welcomePanel, "WELCOME");
    }

    private void createDriverScreen() {
        driverPanel = new JPanel(new GridBagLayout());
        driverPanel.setBackground(new Color(240, 240, 240));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JLabel titleLabel = new JLabel(" –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í–û–î–ò–¢–ï–õ–Ø", JLabel.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 16));

        gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 2;
        driverPanel.add(titleLabel, gbc);

        gbc.gridwidth = 1;
        gbc.gridy = 1; gbc.gridx = 0;
        driverPanel.add(new JLabel("–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:"), gbc);

        gbc.gridx = 1;
        carBrandField = new JTextField(20);
        driverPanel.add(carBrandField, gbc);

        gbc.gridy = 2; gbc.gridx = 0;
        driverPanel.add(new JLabel("–ì–æ—Å. –Ω–æ–º–µ—Ä:"), gbc);

        gbc.gridx = 1;
        carNumberField = new JTextField(20);
        driverPanel.add(carNumberField, gbc);

        gbc.gridy = 3; gbc.gridx = 0;
        driverPanel.add(new JLabel("–í–∞—à–µ –∏–º—è:"), gbc);

        gbc.gridx = 1;
        driverNameField = new JTextField(20);
        driverPanel.add(driverNameField, gbc);

        gbc.gridy = 4; gbc.gridx = 0;
        driverPanel.add(new JLabel("–ö–ª–∞—Å—Å –∞–≤—Ç–æ:"), gbc);

        gbc.gridx = 1;
        String[] classes = {"–≠–∫–æ–Ω–æ–º", "–ö–æ–º—Ñ–æ—Ä—Ç", "–ë–∏–∑–Ω–µ—Å", "–ú–∏–Ω–∏–≤–µ–Ω"};
        carClassCombo = new JComboBox<>(classes);
        driverPanel.add(carClassCombo, gbc);

        // –ö–Ω–æ–ø–∫–∏
        JPanel driverButtonPanel = new JPanel(new FlowLayout());
        driverSubmitBtn = createStyledButton(" –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", new Color(60, 179, 113));
        driverBackBtn = createStyledButton(" –ù–∞–∑–∞–¥", new Color(169, 169, 169));

        driverSubmitBtn.addActionListener(this);
        driverBackBtn.addActionListener(this);

        driverButtonPanel.add(driverSubmitBtn);
        driverButtonPanel.add(driverBackBtn);

        gbc.gridy = 5; gbc.gridx = 0; gbc.gridwidth = 2;
        driverPanel.add(driverButtonPanel, gbc);

        mainPanel.add(driverPanel, "DRIVER");
    }

    private void createPassengerScreen() {
        passengerPanel = new JPanel(new GridBagLayout());
        passengerPanel.setBackground(new Color(240, 240, 240));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JLabel titleLabel = new JLabel(" –ó–ê–ö–ê–ó –¢–ê–ö–°–ò", JLabel.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 16));

        gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 2;
        passengerPanel.add(titleLabel, gbc);

        gbc.gridwidth = 1;
        gbc.gridy = 1; gbc.gridx = 0;
        passengerPanel.add(new JLabel("–ö–ª–∞—Å—Å –∞–≤—Ç–æ:"), gbc);

        gbc.gridx = 1;
        String[] classes = {"–≠–∫–æ–Ω–æ–º", "–ö–æ–º—Ñ–æ—Ä—Ç", "–ë–∏–∑–Ω–µ—Å", "–ú–∏–Ω–∏–≤–µ–Ω"};
        passengerClassCombo = new JComboBox<>(classes);
        passengerPanel.add(passengerClassCombo, gbc);

        gbc.gridy = 2; gbc.gridx = 0;
        passengerPanel.add(new JLabel("–ê–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏:"), gbc);

        gbc.gridx = 1;
        addressField = new JTextField(20);
        passengerPanel.add(addressField, gbc);

        // –ö–Ω–æ–ø–∫–∏
        JPanel passengerButtonPanel = new JPanel(new FlowLayout());
        passengerSubmitBtn = createStyledButton(" –ù–∞–π—Ç–∏ —Ç–∞–∫—Å–∏", new Color(70, 130, 180));
        passengerBackBtn = createStyledButton(" –ù–∞–∑–∞–¥", new Color(169, 169, 169));

        passengerSubmitBtn.addActionListener(this);
        passengerBackBtn.addActionListener(this);

        passengerButtonPanel.add(passengerSubmitBtn);
        passengerButtonPanel.add(passengerBackBtn);

        gbc.gridy = 3; gbc.gridx = 0; gbc.gridwidth = 2;
        passengerPanel.add(passengerButtonPanel, gbc);

        mainPanel.add(passengerPanel, "PASSENGER");
    }

    private void createPriceScreen() {
        pricePanel = new JPanel(new GridBagLayout());
        pricePanel.setBackground(new Color(240, 240, 240));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JLabel titleLabel = new JLabel(" –†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò", JLabel.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 16));

        gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 2;
        pricePanel.add(titleLabel, gbc);

        gbc.gridwidth = 1;
        gbc.gridy = 1; gbc.gridx = 0;
        pricePanel.add(new JLabel("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º):"), gbc);

        gbc.gridx = 1;
        SpinnerModel spinnerModel = new SpinnerNumberModel(10, 1, 500, 1);
        distanceSpinner = new JSpinner(spinnerModel);
        pricePanel.add(distanceSpinner, gbc);

        gbc.gridy = 2; gbc.gridx = 0; gbc.gridwidth = 2;
        calculateBtn = createStyledButton(" –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", new Color(255, 140, 0));
        calculateBtn.addActionListener(this);
        pricePanel.add(calculateBtn, gbc);

        gbc.gridy = 3;
        priceLabel = new JLabel("–°—Ç–æ–∏–º–æ—Å—Ç—å: - —Ä—É–±.", JLabel.CENTER);
        priceLabel.setFont(new Font("Arial", Font.BOLD, 14));
        priceLabel.setForeground(new Color(0, 100, 0));
        pricePanel.add(priceLabel, gbc);

        gbc.gridy = 4;
        priceBackBtn = createStyledButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", new Color(169, 169, 169));
        priceBackBtn.addActionListener(this);
        pricePanel.add(priceBackBtn, gbc);

        mainPanel.add(pricePanel, "PRICE");
    }

    private JButton createStyledButton(String text, Color color) {
        JButton button = new JButton(text);
        button.setBackground(color);
        button.setForeground(Color.WHITE);
        button.setFont(new Font("Arial", Font.BOLD, 12));
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createRaisedBevelBorder());
        return button;
    }

    private void setupMainPanel() {
        add(mainPanel);
        setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == driverBtn) {
            cardLayout.show(mainPanel, "DRIVER");
        } else if (e.getSource() == passengerBtn) {
            cardLayout.show(mainPanel, "PASSENGER");
        } else if (e.getSource() == exitBtn) {
            System.exit(0);
        } else if (e.getSource() == driverBackBtn || e.getSource() == passengerBackBtn) {
            cardLayout.show(mainPanel, "WELCOME");
        } else if (e.getSource() == driverSubmitBtn) {
            registerDriver();
        } else if (e.getSource() == passengerSubmitBtn) {
            orderTaxi();
        } else if (e.getSource() == calculateBtn) {
            calculatePrice();
        } else if (e.getSource() == priceBackBtn) {
            cardLayout.show(mainPanel, "WELCOME");
        }
    }

    private void registerDriver() {
        if (carBrandField.getText().trim().isEmpty() ||
                carNumberField.getText().trim().isEmpty() ||
                driverNameField.getText().trim().isEmpty()) {

            JOptionPane.showMessageDialog(this,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!",
                    "–û—à–∏–±–∫–∞",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        String message = "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n" +
                "–ú–∞—Ä–∫–∞: " + carBrandField.getText() + "\n" +
                "–ù–æ–º–µ—Ä: " + carNumberField.getText() + "\n" +
                "–ò–º—è: " + driverNameField.getText() + "\n" +
                "–ö–ª–∞—Å—Å: " + carClassCombo.getSelectedItem();

        JOptionPane.showMessageDialog(this, message, "–£—Å–ø–µ—Ö", JOptionPane.INFORMATION_MESSAGE);
        cardLayout.show(mainPanel, "PRICE");
    }

    private void orderTaxi() {
        if (addressField.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å!",
                    "–û—à–∏–±–∫–∞",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        String message = "üöñ –¢–∞–∫—Å–∏ –∑–∞–∫–∞–∑–∞–Ω–æ!\n\n" +
                "–ö–ª–∞—Å—Å: " + passengerClassCombo.getSelectedItem() + "\n" +
                "–ê–¥—Ä–µ—Å: " + addressField.getText() + "\n\n" +
                "–í–æ–¥–∏—Ç–µ–ª—å –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç!";

        JOptionPane.showMessageDialog(this, message, "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç", JOptionPane.INFORMATION_MESSAGE);
        cardLayout.show(mainPanel, "PRICE");
    }

    private void calculatePrice() {
        int distance = (Integer) distanceSpinner.getValue();
        int price = calculatePriceLogic(distance);

        priceLabel.setText("–°—Ç–æ–∏–º–æ—Å—Ç—å: " + price + " —Ä—É–±.");
        priceLabel.setForeground(new Color(0, 100, 0));
    }

    private int calculatePriceLogic(int distance) {
        if (distance > 250) return 3000;
        else if (distance > 200) return 2500;
        else if (distance > 180) return 2000;
        else if (distance > 150) return 1500;
        else if (distance > 100) return 1100;
        else if (distance > 95) return 950;
        else if (distance > 70) return 750;
        else if (distance > 50) return 500;
        else if (distance > 35) return 350;
        else if (distance > 20) return 200;
        else if (distance > 10) return 100;
        else return 50;
    }

    public static void main(String[] args) {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –¥–ª—è Swing (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        try {
            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }

        // –ó–∞–ø—É—Å–∫ –≤ –ø–æ—Ç–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TaxiApp();
            }
        });
    }
}
